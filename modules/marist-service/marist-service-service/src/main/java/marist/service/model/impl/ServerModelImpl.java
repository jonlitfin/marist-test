/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package marist.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import marist.service.model.Server;
import marist.service.model.ServerModel;
import marist.service.model.ServerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Server service. Represents a row in the &quot;Marist_Server&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ServerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ServerImpl
 * @see Server
 * @see ServerModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ServerModelImpl extends BaseModelImpl<Server>
	implements ServerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a server model instance should use the {@link Server} interface instead.
	 */
	public static final String TABLE_NAME = "Marist_Server";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "serverId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "distribution", Types.VARCHAR },
			{ "version", Types.VARCHAR },
			{ "vpn", Types.BOOLEAN },
			{ "memory", Types.INTEGER },
			{ "disk", Types.INTEGER },
			{ "cpu", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serverId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("distribution", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vpn", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("memory", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("disk", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("cpu", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table Marist_Server (uuid_ VARCHAR(75) null,serverId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,distribution VARCHAR(75) null,version VARCHAR(75) null,vpn BOOLEAN,memory INTEGER,disk INTEGER,cpu VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Marist_Server";
	public static final String ORDER_BY_JPQL = " ORDER BY server.distribution ASC, server.version ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Marist_Server.distribution ASC, Marist_Server.version ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(marist.service.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.marist.service.model.Server"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(marist.service.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.marist.service.model.Server"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(marist.service.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.marist.service.model.Server"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long CPU_COLUMN_BITMASK = 2L;
	public static final long DISTRIBUTION_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long VPN_COLUMN_BITMASK = 32L;
	public static final long VERSION_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Server toModel(ServerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Server model = new ServerImpl();

		model.setUuid(soapModel.getUuid());
		model.setServerId(soapModel.getServerId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setDistribution(soapModel.getDistribution());
		model.setVersion(soapModel.getVersion());
		model.setVpn(soapModel.isVpn());
		model.setMemory(soapModel.getMemory());
		model.setDisk(soapModel.getDisk());
		model.setCpu(soapModel.getCpu());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Server> toModels(ServerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Server> models = new ArrayList<Server>(soapModels.length);

		for (ServerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(marist.service.service.util.ServiceProps.get(
				"lock.expiration.time.marist.service.model.Server"));

	public ServerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _serverId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setServerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _serverId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Server.class;
	}

	@Override
	public String getModelClassName() {
		return Server.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("serverId", getServerId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("distribution", getDistribution());
		attributes.put("version", getVersion());
		attributes.put("vpn", isVpn());
		attributes.put("memory", getMemory());
		attributes.put("disk", getDisk());
		attributes.put("cpu", getCpu());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long serverId = (Long)attributes.get("serverId");

		if (serverId != null) {
			setServerId(serverId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String distribution = (String)attributes.get("distribution");

		if (distribution != null) {
			setDistribution(distribution);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}

		Boolean vpn = (Boolean)attributes.get("vpn");

		if (vpn != null) {
			setVpn(vpn);
		}

		Integer memory = (Integer)attributes.get("memory");

		if (memory != null) {
			setMemory(memory);
		}

		Integer disk = (Integer)attributes.get("disk");

		if (disk != null) {
			setDisk(disk);
		}

		String cpu = (String)attributes.get("cpu");

		if (cpu != null) {
			setCpu(cpu);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getServerId() {
		return _serverId;
	}

	@Override
	public void setServerId(long serverId) {
		_serverId = serverId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getDistribution() {
		if (_distribution == null) {
			return "";
		}
		else {
			return _distribution;
		}
	}

	@Override
	public void setDistribution(String distribution) {
		_columnBitmask = -1L;

		if (_originalDistribution == null) {
			_originalDistribution = _distribution;
		}

		_distribution = distribution;
	}

	public String getOriginalDistribution() {
		return GetterUtil.getString(_originalDistribution);
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_columnBitmask = -1L;

		_version = version;
	}

	@JSON
	@Override
	public boolean getVpn() {
		return _vpn;
	}

	@JSON
	@Override
	public boolean isVpn() {
		return _vpn;
	}

	@Override
	public void setVpn(boolean vpn) {
		_columnBitmask |= VPN_COLUMN_BITMASK;

		if (!_setOriginalVpn) {
			_setOriginalVpn = true;

			_originalVpn = _vpn;
		}

		_vpn = vpn;
	}

	public boolean getOriginalVpn() {
		return _originalVpn;
	}

	@JSON
	@Override
	public int getMemory() {
		return _memory;
	}

	@Override
	public void setMemory(int memory) {
		_memory = memory;
	}

	@JSON
	@Override
	public int getDisk() {
		return _disk;
	}

	@Override
	public void setDisk(int disk) {
		_disk = disk;
	}

	@JSON
	@Override
	public String getCpu() {
		if (_cpu == null) {
			return "";
		}
		else {
			return _cpu;
		}
	}

	@Override
	public void setCpu(String cpu) {
		_columnBitmask |= CPU_COLUMN_BITMASK;

		if (_originalCpu == null) {
			_originalCpu = _cpu;
		}

		_cpu = cpu;
	}

	public String getOriginalCpu() {
		return GetterUtil.getString(_originalCpu);
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Server.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Server.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Server toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Server)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServerImpl serverImpl = new ServerImpl();

		serverImpl.setUuid(getUuid());
		serverImpl.setServerId(getServerId());
		serverImpl.setGroupId(getGroupId());
		serverImpl.setCompanyId(getCompanyId());
		serverImpl.setUserId(getUserId());
		serverImpl.setUserName(getUserName());
		serverImpl.setCreateDate(getCreateDate());
		serverImpl.setModifiedDate(getModifiedDate());
		serverImpl.setName(getName());
		serverImpl.setDistribution(getDistribution());
		serverImpl.setVersion(getVersion());
		serverImpl.setVpn(isVpn());
		serverImpl.setMemory(getMemory());
		serverImpl.setDisk(getDisk());
		serverImpl.setCpu(getCpu());

		serverImpl.resetOriginalValues();

		return serverImpl;
	}

	@Override
	public int compareTo(Server server) {
		int value = 0;

		value = getDistribution().compareTo(server.getDistribution());

		if (value != 0) {
			return value;
		}

		value = getVersion().compareTo(server.getVersion());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Server)) {
			return false;
		}

		Server server = (Server)obj;

		long primaryKey = server.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ServerModelImpl serverModelImpl = this;

		serverModelImpl._originalUuid = serverModelImpl._uuid;

		serverModelImpl._originalGroupId = serverModelImpl._groupId;

		serverModelImpl._setOriginalGroupId = false;

		serverModelImpl._originalCompanyId = serverModelImpl._companyId;

		serverModelImpl._setOriginalCompanyId = false;

		serverModelImpl._setModifiedDate = false;

		serverModelImpl._originalDistribution = serverModelImpl._distribution;

		serverModelImpl._originalVpn = serverModelImpl._vpn;

		serverModelImpl._setOriginalVpn = false;

		serverModelImpl._originalCpu = serverModelImpl._cpu;

		serverModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Server> toCacheModel() {
		ServerCacheModel serverCacheModel = new ServerCacheModel();

		serverCacheModel.uuid = getUuid();

		String uuid = serverCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			serverCacheModel.uuid = null;
		}

		serverCacheModel.serverId = getServerId();

		serverCacheModel.groupId = getGroupId();

		serverCacheModel.companyId = getCompanyId();

		serverCacheModel.userId = getUserId();

		serverCacheModel.userName = getUserName();

		String userName = serverCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			serverCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			serverCacheModel.createDate = createDate.getTime();
		}
		else {
			serverCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			serverCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			serverCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		serverCacheModel.name = getName();

		String name = serverCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			serverCacheModel.name = null;
		}

		serverCacheModel.distribution = getDistribution();

		String distribution = serverCacheModel.distribution;

		if ((distribution != null) && (distribution.length() == 0)) {
			serverCacheModel.distribution = null;
		}

		serverCacheModel.version = getVersion();

		String version = serverCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			serverCacheModel.version = null;
		}

		serverCacheModel.vpn = isVpn();

		serverCacheModel.memory = getMemory();

		serverCacheModel.disk = getDisk();

		serverCacheModel.cpu = getCpu();

		String cpu = serverCacheModel.cpu;

		if ((cpu != null) && (cpu.length() == 0)) {
			serverCacheModel.cpu = null;
		}

		return serverCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", serverId=");
		sb.append(getServerId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", distribution=");
		sb.append(getDistribution());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append(", vpn=");
		sb.append(isVpn());
		sb.append(", memory=");
		sb.append(getMemory());
		sb.append(", disk=");
		sb.append(getDisk());
		sb.append(", cpu=");
		sb.append(getCpu());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("marist.service.model.Server");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serverId</column-name><column-value><![CDATA[");
		sb.append(getServerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>distribution</column-name><column-value><![CDATA[");
		sb.append(getDistribution());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vpn</column-name><column-value><![CDATA[");
		sb.append(isVpn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>memory</column-name><column-value><![CDATA[");
		sb.append(getMemory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>disk</column-name><column-value><![CDATA[");
		sb.append(getDisk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cpu</column-name><column-value><![CDATA[");
		sb.append(getCpu());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Server.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Server.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _serverId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _distribution;
	private String _originalDistribution;
	private String _version;
	private boolean _vpn;
	private boolean _originalVpn;
	private boolean _setOriginalVpn;
	private int _memory;
	private int _disk;
	private String _cpu;
	private String _originalCpu;
	private long _columnBitmask;
	private Server _escapedModel;
}